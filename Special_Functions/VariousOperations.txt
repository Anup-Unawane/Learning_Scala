Various operations in scala using scala interpreter


//This will partition the collection
scala> (1 to 8).partition(x => x%2 != 0)
res2: (scala.collection.immutable.IndexedSeq[Int], scala.collection.immutable.IndexedSeq[Int]) = (Vector(1, 3, 5, 7),Vector(2, 4, 6, 8))

scala> List(1,2,3,4,5,6,7,8).partition(x => x%2 != 0)
res3: (List[Int], List[Int]) = (List(1, 3, 5, 7),List(2, 4, 6, 8))

//Group By Operation on a list. groupBy returns a map with key as function evaluation on each element in list and value as List of element
scala> List("Red", "Orange", "Green", "Purple", "Pink").groupBy(x => x.head)
res4: scala.collection.immutable.Map[Char,List[String]] = Map(P -> List(Purple, Pink), G -> List(Green), R -> List(Red), O -> List(Orange))

//Take operation on collection.
//This will take first 10 elements in collection
scala> (1 to 100).take(10)
res5: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

//takeRight will take last 10 elements in collection
scala> (1 to 100).takeRight(10)
res6: scala.collection.immutable.Range = Range(91, 92, 93, 94, 95, 96, 97, 98, 99, 100)

//takeWhile will take all elements which satisfy a predicate
scala> (1 to 100).takeWhile(x => x < 40)
res7: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39)

//distinct operation on a collection
scala>  List(1,2,3,4,4,3,2,1).distinct
res8: List[Int] = List(1, 2, 3, 4)

//Empty List of String
scala> List.empty[String]
res9: List[String] = List()

//Empty List of Int
scala> List.empty[Int]
res10: List[Int] = List()

//Initializing a list of 10 elements with a value
scala> List.fill(10){
     | val x = 10
     | val y = 20
     | x + y+ 30
     | }
res11: List[Int] = List(60, 60, 60, 60, 60, 60, 60, 60, 60, 60)
